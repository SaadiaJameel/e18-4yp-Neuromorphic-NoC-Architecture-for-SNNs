$date
	Sun Jun  9 18:41:23 2024
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module cpu_tb $end
$scope module dut $end
$var wire 1 ! CLK $end
$var wire 32 " DATA_MEM_ADDR [31:0] $end
$var wire 1 # DATA_MEM_BUSYWAIT $end
$var wire 4 $ DATA_MEM_READ [3:0] $end
$var wire 32 % DATA_MEM_READ_DATA [31:0] $end
$var wire 3 & DATA_MEM_WRITE [2:0] $end
$var wire 32 ' INSTRUCTION [31:0] $end
$var wire 1 ( INSTR_MEM_BUSYWAIT $end
$var wire 1 ) MEM_WRITE_DATA_SEL $end
$var wire 1 * RESET $end
$var wire 32 + WB_WRITEBACK_VALUE [31:0] $end
$var wire 2 , WB_WB_VALUE_SELECT [1:0] $end
$var wire 1 - WB_REG_WRITE_EN $end
$var wire 5 . WB_REG_WRITE_ADDR [4:0] $end
$var wire 32 / WB_PC [31:0] $end
$var wire 1 0 WB_FREG_WRITE_EN $end
$var wire 32 1 WB_FPU_OUT [31:0] $end
$var wire 32 2 WB_DATA_MEM_READ_DATA [31:0] $end
$var wire 1 3 WB_DATA_MEM_READ $end
$var wire 32 4 WB_ALU_OUT [31:0] $end
$var wire 32 5 PC_SELECT_OUT [31:0] $end
$var wire 32 6 PC_PLUS_4 [31:0] $end
$var wire 32 7 PC_NEXT [31:0] $end
$var wire 1 8 MEM_WRITE_DATA_FWD_SEL $end
$var wire 32 9 MEM_WRITE_DATA [31:0] $end
$var wire 2 : MEM_WB_VALUE_SELECT [1:0] $end
$var wire 1 ; MEM_REG_WRITE_EN $end
$var wire 5 < MEM_REG_WRITE_ADDR [4:0] $end
$var wire 2 = MEM_REG_TYPE [1:0] $end
$var wire 5 > MEM_REG_READ_ADDR2 [4:0] $end
$var wire 32 ? MEM_REG_DATA2 [31:0] $end
$var wire 32 @ MEM_PC_PLUS_4 [31:0] $end
$var wire 32 A MEM_PC [31:0] $end
$var wire 1 B MEM_FREG_WRITE_EN $end
$var wire 32 C MEM_FREG_DATA2 [31:0] $end
$var wire 32 D MEM_FPU_OUT [31:0] $end
$var wire 1 E MEM_DATA_MEM_WRITE_DATA_SELECT $end
$var wire 3 F MEM_DATA_MEM_WRITE [2:0] $end
$var wire 4 G MEM_DATA_MEM_READ [3:0] $end
$var wire 32 H MEM_ALU_OUT [31:0] $end
$var wire 2 I ID_WB_VALUE_SELECT [1:0] $end
$var wire 1 J ID_REG_WRITE_EN $end
$var wire 2 K ID_REG_TYPE [1:0] $end
$var wire 32 L ID_REG_DATA2 [31:0] $end
$var wire 32 M ID_REG_DATA1 [31:0] $end
$var wire 1 N ID_PR_IF_ID_RESET $end
$var wire 1 O ID_PR_IF_ID_HOLD $end
$var wire 1 P ID_PR_ID_EX_RESET $end
$var wire 32 Q ID_PC [31:0] $end
$var wire 1 R ID_OPERAND2_SELECT $end
$var wire 1 S ID_OPERAND1_SELECT $end
$var wire 1 T ID_LU_HAZ_SIG $end
$var wire 32 U ID_INSTRUCTION [31:0] $end
$var wire 3 V ID_IMMEDIATE_SELECT [2:0] $end
$var wire 32 W ID_IMMEDIATE [31:0] $end
$var wire 1 X ID_FREG_WRITE_EN $end
$var wire 32 Y ID_FREG_DATA3 [31:0] $end
$var wire 32 Z ID_FREG_DATA2 [31:0] $end
$var wire 32 [ ID_FREG_DATA1 [31:0] $end
$var wire 5 \ ID_FPU_SELECT [4:0] $end
$var wire 1 ] ID_DATA_MEM_WRITE_DATA_SELECT $end
$var wire 3 ^ ID_DATA_MEM_WRITE [2:0] $end
$var wire 4 _ ID_DATA_MEM_READ [3:0] $end
$var wire 4 ` ID_BRANCH_CTRL [3:0] $end
$var wire 6 a ID_ALU_SELECT [5:0] $end
$var wire 2 b EX_WB_VALUE_SELECT [1:0] $end
$var wire 1 c EX_REG_WRITE_EN $end
$var wire 5 d EX_REG_WRITE_ADDR [4:0] $end
$var wire 2 e EX_REG_TYPE [1:0] $end
$var wire 5 f EX_REG_READ_ADDR3 [4:0] $end
$var wire 5 g EX_REG_READ_ADDR2 [4:0] $end
$var wire 5 h EX_REG_READ_ADDR1 [4:0] $end
$var wire 32 i EX_REG_DATA2 [31:0] $end
$var wire 32 j EX_REG_DATA1 [31:0] $end
$var wire 32 k EX_PC [31:0] $end
$var wire 1 l EX_OPERAND2_SELECT $end
$var wire 1 m EX_OPERAND1_SELECT $end
$var wire 2 n EX_OP3_FWD_SEL [1:0] $end
$var wire 2 o EX_OP2_FWD_SEL [1:0] $end
$var wire 32 p EX_OP2_FWD_MUX_OUT [31:0] $end
$var wire 2 q EX_OP1_FWD_SEL [1:0] $end
$var wire 32 r EX_OP1_FWD_MUX_OUT [31:0] $end
$var wire 32 s EX_IMMEDIATE [31:0] $end
$var wire 1 t EX_FREG_WRITE_EN $end
$var wire 32 u EX_FREG_DATA3 [31:0] $end
$var wire 32 v EX_FREG_DATA2 [31:0] $end
$var wire 32 w EX_FREG_DATA1 [31:0] $end
$var wire 5 x EX_FPU_SELECT [4:0] $end
$var wire 32 y EX_FPU_OUT [31:0] $end
$var wire 32 z EX_FPU_DATA3 [31:0] $end
$var wire 32 { EX_FPU_DATA2 [31:0] $end
$var wire 32 | EX_FPU_DATA1 [31:0] $end
$var wire 1 } EX_DATA_MEM_WRITE_DATA_SELECT $end
$var wire 3 ~ EX_DATA_MEM_WRITE [2:0] $end
$var wire 4 !" EX_DATA_MEM_READ [3:0] $end
$var wire 4 "" EX_BRANCH_CTRL [3:0] $end
$var wire 1 #" EX_BJ_SIG $end
$var wire 6 $" EX_ALU_SELECT [5:0] $end
$var wire 32 %" EX_ALU_OUT [31:0] $end
$var wire 32 &" EX_ALU_DATA2 [31:0] $end
$var wire 32 '" EX_ALU_DATA1 [31:0] $end
$var wire 32 (" DATA_MEM_WRITE_DATA [31:0] $end
$var reg 32 )" PC [31:0] $end
$scope module BRANCH_SELECT_MUX $end
$var wire 1 #" SELECT $end
$var wire 32 *" INPUT2 [31:0] $end
$var wire 32 +" INPUT1 [31:0] $end
$var reg 32 ," RESULT [31:0] $end
$upscope $end
$scope module EX_ALU $end
$var wire 32 -" INTER_AND [31:0] $end
$var wire 32 ." INTER_FWD [31:0] $end
$var wire 32 /" INTER_OR [31:0] $end
$var wire 32 0" INTER_XOR [31:0] $end
$var wire 6 1" SELECT [5:0] $end
$var wire 32 2" INTER_SUB [31:0] $end
$var wire 32 3" INTER_SRL [31:0] $end
$var wire 32 4" INTER_SRA [31:0] $end
$var wire 32 5" INTER_SLTU [31:0] $end
$var wire 32 6" INTER_SLT [31:0] $end
$var wire 32 7" INTER_SLL [31:0] $end
$var wire 32 8" INTER_REMU [31:0] $end
$var wire 32 9" INTER_REM [31:0] $end
$var wire 64 :" INTER_MULHU64 [63:0] $end
$var wire 32 ;" INTER_MULHU [31:0] $end
$var wire 32 <" INTER_MULHSU [31:0] $end
$var wire 64 =" INTER_MULH64 [63:0] $end
$var wire 32 >" INTER_MULH [31:0] $end
$var wire 32 ?" INTER_MUL [31:0] $end
$var wire 32 @" INTER_DIVU [31:0] $end
$var wire 32 A" INTER_DIV [31:0] $end
$var wire 32 B" INTER_ADD [31:0] $end
$var wire 32 C" DATA2 [31:0] $end
$var wire 32 D" DATA1 [31:0] $end
$var reg 64 E" INTER_MULHSU64 [63:0] $end
$var reg 32 F" RESULT [31:0] $end
$upscope $end
$scope module EX_BRANCH_CTRL_UNIT $end
$var wire 4 G" SELECT [3:0] $end
$var wire 32 H" DATA2 [31:0] $end
$var wire 32 I" DATA1 [31:0] $end
$var wire 1 J" BNE $end
$var wire 1 K" BLTU $end
$var wire 1 L" BLT $end
$var wire 1 M" BGEU $end
$var wire 1 N" BGE $end
$var wire 1 O" BEQ $end
$var reg 1 #" BJ_SIG $end
$upscope $end
$scope module EX_FOP1_FWD_MUX $end
$var wire 32 P" INPUT4 [31:0] $end
$var wire 2 Q" SELECT [1:0] $end
$var wire 32 R" INPUT3 [31:0] $end
$var wire 32 S" INPUT2 [31:0] $end
$var wire 32 T" INPUT1 [31:0] $end
$var reg 32 U" RESULT [31:0] $end
$upscope $end
$scope module EX_FOP2_FWD_MUX $end
$var wire 32 V" INPUT4 [31:0] $end
$var wire 2 W" SELECT [1:0] $end
$var wire 32 X" INPUT3 [31:0] $end
$var wire 32 Y" INPUT2 [31:0] $end
$var wire 32 Z" INPUT1 [31:0] $end
$var reg 32 [" RESULT [31:0] $end
$upscope $end
$scope module EX_FOP3_FWD_MUX $end
$var wire 32 \" INPUT4 [31:0] $end
$var wire 2 ]" SELECT [1:0] $end
$var wire 32 ^" INPUT3 [31:0] $end
$var wire 32 _" INPUT2 [31:0] $end
$var wire 32 `" INPUT1 [31:0] $end
$var reg 32 a" RESULT [31:0] $end
$upscope $end
$scope module EX_FPU $end
$var wire 1 b" AddBar_Sub $end
$var wire 1 c" AddSubOp2Select $end
$var wire 32 d" DATA1 [31:0] $end
$var wire 32 e" DATA2 [31:0] $end
$var wire 32 f" DATA3 [31:0] $end
$var wire 32 g" INTER_FCLASS [31:0] $end
$var wire 32 h" INTER_FCVTWUS [31:0] $end
$var wire 32 i" INTER_FFWD [31:0] $end
$var wire 32 j" INTER_FLE [31:0] $end
$var wire 32 k" INTER_FSQRT [31:0] $end
$var wire 5 l" SELECT [4:0] $end
$var wire 1 m" Mul_Underflow $end
$var wire 1 n" Mul_Overflow $end
$var wire 1 o" Mul_Exception $end
$var wire 32 p" INTER_FSGNJX [31:0] $end
$var wire 32 q" INTER_FSGNJN [31:0] $end
$var wire 32 r" INTER_FSGNJ [31:0] $end
$var wire 32 s" INTER_FMUL [31:0] $end
$var wire 32 t" INTER_FMIN [31:0] $end
$var wire 32 u" INTER_FMAX [31:0] $end
$var wire 32 v" INTER_FLT [31:0] $end
$var wire 32 w" INTER_FEQ [31:0] $end
$var wire 32 x" INTER_FDIV [31:0] $end
$var wire 32 y" INTER_FCVTWS [31:0] $end
$var wire 32 z" INTER_FADDSUB [31:0] $end
$var wire 1 {" Div_Exception $end
$var wire 2 |" COMPARE_RESULT [1:0] $end
$var wire 1 }" Add_Sub_Exception $end
$var wire 32 ~" AddSubOp2 [31:0] $end
$var wire 2 !# AddSubOp1Select [1:0] $end
$var wire 32 "# AddSubOp1 [31:0] $end
$var reg 32 ## RESULT [31:0] $end
$scope module AddSubOp1_Mux $end
$var wire 32 $# INPUT1 [31:0] $end
$var wire 32 %# INPUT2 [31:0] $end
$var wire 32 &# INPUT4 [31:0] $end
$var wire 2 '# SELECT [1:0] $end
$var wire 32 (# INPUT3 [31:0] $end
$var reg 32 )# RESULT [31:0] $end
$upscope $end
$scope module AddSubOp2_Mux $end
$var wire 32 *# INPUT1 [31:0] $end
$var wire 32 +# INPUT2 [31:0] $end
$var wire 1 c" SELECT $end
$var reg 32 ,# RESULT [31:0] $end
$upscope $end
$scope module AuI $end
$var wire 1 b" AddBar_Sub $end
$var wire 1 }" Exception $end
$var wire 32 -# a_operand [31:0] $end
$var wire 32 .# b_operand [31:0] $end
$var wire 25 /# subtraction_diff [24:0] $end
$var wire 31 0# sub_diff [30:0] $end
$var wire 24 1# significand_sub_complement [23:0] $end
$var wire 25 2# significand_sub [24:0] $end
$var wire 24 3# significand_b_add_sub [23:0] $end
$var wire 24 4# significand_b [23:0] $end
$var wire 25 5# significand_add [24:0] $end
$var wire 24 6# significand_a [23:0] $end
$var wire 32 7# result [31:0] $end
$var wire 1 8# perform $end
$var wire 1 9# output_sign $end
$var wire 1 :# operation_sub_addBar $end
$var wire 32 ;# operand_b [31:0] $end
$var wire 32 <# operand_a [31:0] $end
$var wire 8 =# exponent_sub [7:0] $end
$var wire 8 ># exponent_diff [7:0] $end
$var wire 8 ?# exponent_b_add_sub [7:0] $end
$var wire 1 @# exp_b $end
$var wire 1 A# exp_a $end
$var wire 31 B# add_sum [30:0] $end
$var wire 1 C# Comp_enable $end
$scope module pe $end
$var wire 8 D# Exponent_a [7:0] $end
$var wire 25 E# significand [24:0] $end
$var wire 8 F# Exponent_sub [7:0] $end
$var reg 25 G# Significand [24:0] $end
$var reg 5 H# shift [4:0] $end
$upscope $end
$upscope $end
$scope module CuI $end
$var wire 32 I# a_operand [31:0] $end
$var wire 32 J# b_operand [31:0] $end
$var reg 2 K# result [1:0] $end
$upscope $end
$scope module DuI $end
$var wire 1 {" Exception $end
$var wire 32 L# a_operand [31:0] $end
$var wire 32 M# b_operand [31:0] $end
$var wire 32 N# denominator [31:0] $end
$var wire 32 O# operand_a_change [31:0] $end
$var wire 1 P# sign $end
$var wire 32 Q# solution [31:0] $end
$var wire 8 R# shift [7:0] $end
$var wire 32 S# result [31:0] $end
$var wire 32 T# operand_a [31:0] $end
$var wire 8 U# exponent_a [7:0] $end
$var wire 32 V# divisor [31:0] $end
$var wire 32 W# Iteration_X3 [31:0] $end
$var wire 32 X# Iteration_X2 [31:0] $end
$var wire 32 Y# Iteration_X1 [31:0] $end
$var wire 32 Z# Iteration_X0 [31:0] $end
$var wire 32 [# Intermediate_X0 [31:0] $end
$scope module END $end
$var wire 1 \# Exception $end
$var wire 1 ]# Overflow $end
$var wire 32 ^# b_operand [31:0] $end
$var wire 1 _# sign $end
$var wire 1 `# zero $end
$var wire 9 a# sum_exponent [8:0] $end
$var wire 32 b# result [31:0] $end
$var wire 1 c# product_round $end
$var wire 48 d# product_normalised [47:0] $end
$var wire 23 e# product_mantissa [22:0] $end
$var wire 48 f# product [47:0] $end
$var wire 24 g# operand_b [23:0] $end
$var wire 24 h# operand_a [23:0] $end
$var wire 1 i# normalised $end
$var wire 9 j# exponent [8:0] $end
$var wire 32 k# a_operand [31:0] $end
$var wire 1 l# Underflow $end
$upscope $end
$scope module X0 $end
$var wire 1 m# AddBar_Sub $end
$var wire 1 n# Exception $end
$var wire 32 o# b_operand [31:0] $end
$var wire 1 p# operation_sub_addBar $end
$var wire 1 q# output_sign $end
$var wire 25 r# subtraction_diff [24:0] $end
$var wire 31 s# sub_diff [30:0] $end
$var wire 24 t# significand_sub_complement [23:0] $end
$var wire 25 u# significand_sub [24:0] $end
$var wire 24 v# significand_b_add_sub [23:0] $end
$var wire 24 w# significand_b [23:0] $end
$var wire 25 x# significand_add [24:0] $end
$var wire 24 y# significand_a [23:0] $end
$var wire 32 z# result [31:0] $end
$var wire 1 {# perform $end
$var wire 32 |# operand_b [31:0] $end
$var wire 32 }# operand_a [31:0] $end
$var wire 8 ~# exponent_sub [7:0] $end
$var wire 8 !$ exponent_diff [7:0] $end
$var wire 8 "$ exponent_b_add_sub [7:0] $end
$var wire 1 #$ exp_b $end
$var wire 1 $$ exp_a $end
$var wire 31 %$ add_sum [30:0] $end
$var wire 32 &$ a_operand [31:0] $end
$var wire 1 '$ Comp_enable $end
$scope module pe $end
$var wire 8 ($ Exponent_a [7:0] $end
$var wire 25 )$ significand [24:0] $end
$var wire 8 *$ Exponent_sub [7:0] $end
$var reg 25 +$ Significand [24:0] $end
$var reg 5 ,$ shift [4:0] $end
$upscope $end
$upscope $end
$scope module X1 $end
$var wire 32 -$ operand_1 [31:0] $end
$var wire 32 .$ operand_2 [31:0] $end
$var wire 32 /$ solution [31:0] $end
$var wire 32 0$ Intermediate_Value2 [31:0] $end
$var wire 32 1$ Intermediate_Value1 [31:0] $end
$scope module A1 $end
$var wire 1 2$ AddBar_Sub $end
$var wire 1 3$ Exception $end
$var wire 32 4$ a_operand [31:0] $end
$var wire 32 5$ b_operand [31:0] $end
$var wire 1 6$ operation_sub_addBar $end
$var wire 1 7$ output_sign $end
$var wire 25 8$ subtraction_diff [24:0] $end
$var wire 31 9$ sub_diff [30:0] $end
$var wire 24 :$ significand_sub_complement [23:0] $end
$var wire 25 ;$ significand_sub [24:0] $end
$var wire 24 <$ significand_b_add_sub [23:0] $end
$var wire 24 =$ significand_b [23:0] $end
$var wire 25 >$ significand_add [24:0] $end
$var wire 24 ?$ significand_a [23:0] $end
$var wire 32 @$ result [31:0] $end
$var wire 1 A$ perform $end
$var wire 32 B$ operand_b [31:0] $end
$var wire 32 C$ operand_a [31:0] $end
$var wire 8 D$ exponent_sub [7:0] $end
$var wire 8 E$ exponent_diff [7:0] $end
$var wire 8 F$ exponent_b_add_sub [7:0] $end
$var wire 1 G$ exp_b $end
$var wire 1 H$ exp_a $end
$var wire 31 I$ add_sum [30:0] $end
$var wire 1 J$ Comp_enable $end
$scope module pe $end
$var wire 8 K$ Exponent_a [7:0] $end
$var wire 25 L$ significand [24:0] $end
$var wire 8 M$ Exponent_sub [7:0] $end
$var reg 25 N$ Significand [24:0] $end
$var reg 5 O$ shift [4:0] $end
$upscope $end
$upscope $end
$scope module M1 $end
$var wire 1 P$ Exception $end
$var wire 1 Q$ Overflow $end
$var wire 32 R$ a_operand [31:0] $end
$var wire 32 S$ b_operand [31:0] $end
$var wire 1 T$ sign $end
$var wire 1 U$ zero $end
$var wire 9 V$ sum_exponent [8:0] $end
$var wire 32 W$ result [31:0] $end
$var wire 1 X$ product_round $end
$var wire 48 Y$ product_normalised [47:0] $end
$var wire 23 Z$ product_mantissa [22:0] $end
$var wire 48 [$ product [47:0] $end
$var wire 24 \$ operand_b [23:0] $end
$var wire 24 ]$ operand_a [23:0] $end
$var wire 1 ^$ normalised $end
$var wire 9 _$ exponent [8:0] $end
$var wire 1 `$ Underflow $end
$upscope $end
$scope module M2 $end
$var wire 1 a$ Exception $end
$var wire 1 b$ Overflow $end
$var wire 32 c$ a_operand [31:0] $end
$var wire 32 d$ b_operand [31:0] $end
$var wire 1 e$ sign $end
$var wire 1 f$ zero $end
$var wire 9 g$ sum_exponent [8:0] $end
$var wire 32 h$ result [31:0] $end
$var wire 1 i$ product_round $end
$var wire 48 j$ product_normalised [47:0] $end
$var wire 23 k$ product_mantissa [22:0] $end
$var wire 48 l$ product [47:0] $end
$var wire 24 m$ operand_b [23:0] $end
$var wire 24 n$ operand_a [23:0] $end
$var wire 1 o$ normalised $end
$var wire 9 p$ exponent [8:0] $end
$var wire 1 q$ Underflow $end
$upscope $end
$upscope $end
$scope module X2 $end
$var wire 32 r$ operand_1 [31:0] $end
$var wire 32 s$ operand_2 [31:0] $end
$var wire 32 t$ solution [31:0] $end
$var wire 32 u$ Intermediate_Value2 [31:0] $end
$var wire 32 v$ Intermediate_Value1 [31:0] $end
$scope module A1 $end
$var wire 1 w$ AddBar_Sub $end
$var wire 1 x$ Exception $end
$var wire 32 y$ a_operand [31:0] $end
$var wire 32 z$ b_operand [31:0] $end
$var wire 1 {$ operation_sub_addBar $end
$var wire 1 |$ output_sign $end
$var wire 25 }$ subtraction_diff [24:0] $end
$var wire 31 ~$ sub_diff [30:0] $end
$var wire 24 !% significand_sub_complement [23:0] $end
$var wire 25 "% significand_sub [24:0] $end
$var wire 24 #% significand_b_add_sub [23:0] $end
$var wire 24 $% significand_b [23:0] $end
$var wire 25 %% significand_add [24:0] $end
$var wire 24 &% significand_a [23:0] $end
$var wire 32 '% result [31:0] $end
$var wire 1 (% perform $end
$var wire 32 )% operand_b [31:0] $end
$var wire 32 *% operand_a [31:0] $end
$var wire 8 +% exponent_sub [7:0] $end
$var wire 8 ,% exponent_diff [7:0] $end
$var wire 8 -% exponent_b_add_sub [7:0] $end
$var wire 1 .% exp_b $end
$var wire 1 /% exp_a $end
$var wire 31 0% add_sum [30:0] $end
$var wire 1 1% Comp_enable $end
$scope module pe $end
$var wire 8 2% Exponent_a [7:0] $end
$var wire 25 3% significand [24:0] $end
$var wire 8 4% Exponent_sub [7:0] $end
$var reg 25 5% Significand [24:0] $end
$var reg 5 6% shift [4:0] $end
$upscope $end
$upscope $end
$scope module M1 $end
$var wire 1 7% Exception $end
$var wire 1 8% Overflow $end
$var wire 32 9% a_operand [31:0] $end
$var wire 32 :% b_operand [31:0] $end
$var wire 1 ;% sign $end
$var wire 1 <% zero $end
$var wire 9 =% sum_exponent [8:0] $end
$var wire 32 >% result [31:0] $end
$var wire 1 ?% product_round $end
$var wire 48 @% product_normalised [47:0] $end
$var wire 23 A% product_mantissa [22:0] $end
$var wire 48 B% product [47:0] $end
$var wire 24 C% operand_b [23:0] $end
$var wire 24 D% operand_a [23:0] $end
$var wire 1 E% normalised $end
$var wire 9 F% exponent [8:0] $end
$var wire 1 G% Underflow $end
$upscope $end
$scope module M2 $end
$var wire 1 H% Exception $end
$var wire 1 I% Overflow $end
$var wire 32 J% a_operand [31:0] $end
$var wire 32 K% b_operand [31:0] $end
$var wire 1 L% sign $end
$var wire 1 M% zero $end
$var wire 9 N% sum_exponent [8:0] $end
$var wire 32 O% result [31:0] $end
$var wire 1 P% product_round $end
$var wire 48 Q% product_normalised [47:0] $end
$var wire 23 R% product_mantissa [22:0] $end
$var wire 48 S% product [47:0] $end
$var wire 24 T% operand_b [23:0] $end
$var wire 24 U% operand_a [23:0] $end
$var wire 1 V% normalised $end
$var wire 9 W% exponent [8:0] $end
$var wire 1 X% Underflow $end
$upscope $end
$upscope $end
$scope module X3 $end
$var wire 32 Y% operand_1 [31:0] $end
$var wire 32 Z% operand_2 [31:0] $end
$var wire 32 [% solution [31:0] $end
$var wire 32 \% Intermediate_Value2 [31:0] $end
$var wire 32 ]% Intermediate_Value1 [31:0] $end
$scope module A1 $end
$var wire 1 ^% AddBar_Sub $end
$var wire 1 _% Exception $end
$var wire 32 `% a_operand [31:0] $end
$var wire 32 a% b_operand [31:0] $end
$var wire 1 b% operation_sub_addBar $end
$var wire 1 c% output_sign $end
$var wire 25 d% subtraction_diff [24:0] $end
$var wire 31 e% sub_diff [30:0] $end
$var wire 24 f% significand_sub_complement [23:0] $end
$var wire 25 g% significand_sub [24:0] $end
$var wire 24 h% significand_b_add_sub [23:0] $end
$var wire 24 i% significand_b [23:0] $end
$var wire 25 j% significand_add [24:0] $end
$var wire 24 k% significand_a [23:0] $end
$var wire 32 l% result [31:0] $end
$var wire 1 m% perform $end
$var wire 32 n% operand_b [31:0] $end
$var wire 32 o% operand_a [31:0] $end
$var wire 8 p% exponent_sub [7:0] $end
$var wire 8 q% exponent_diff [7:0] $end
$var wire 8 r% exponent_b_add_sub [7:0] $end
$var wire 1 s% exp_b $end
$var wire 1 t% exp_a $end
$var wire 31 u% add_sum [30:0] $end
$var wire 1 v% Comp_enable $end
$scope module pe $end
$var wire 8 w% Exponent_a [7:0] $end
$var wire 25 x% significand [24:0] $end
$var wire 8 y% Exponent_sub [7:0] $end
$var reg 25 z% Significand [24:0] $end
$var reg 5 {% shift [4:0] $end
$upscope $end
$upscope $end
$scope module M1 $end
$var wire 1 |% Exception $end
$var wire 1 }% Overflow $end
$var wire 32 ~% a_operand [31:0] $end
$var wire 32 !& b_operand [31:0] $end
$var wire 1 "& sign $end
$var wire 1 #& zero $end
$var wire 9 $& sum_exponent [8:0] $end
$var wire 32 %& result [31:0] $end
$var wire 1 && product_round $end
$var wire 48 '& product_normalised [47:0] $end
$var wire 23 (& product_mantissa [22:0] $end
$var wire 48 )& product [47:0] $end
$var wire 24 *& operand_b [23:0] $end
$var wire 24 +& operand_a [23:0] $end
$var wire 1 ,& normalised $end
$var wire 9 -& exponent [8:0] $end
$var wire 1 .& Underflow $end
$upscope $end
$scope module M2 $end
$var wire 1 /& Exception $end
$var wire 1 0& Overflow $end
$var wire 32 1& a_operand [31:0] $end
$var wire 32 2& b_operand [31:0] $end
$var wire 1 3& sign $end
$var wire 1 4& zero $end
$var wire 9 5& sum_exponent [8:0] $end
$var wire 32 6& result [31:0] $end
$var wire 1 7& product_round $end
$var wire 48 8& product_normalised [47:0] $end
$var wire 23 9& product_mantissa [22:0] $end
$var wire 48 :& product [47:0] $end
$var wire 24 ;& operand_b [23:0] $end
$var wire 24 <& operand_a [23:0] $end
$var wire 1 =& normalised $end
$var wire 9 >& exponent [8:0] $end
$var wire 1 ?& Underflow $end
$upscope $end
$upscope $end
$scope module x0 $end
$var wire 1 @& Exception $end
$var wire 1 A& Overflow $end
$var wire 32 B& a_operand [31:0] $end
$var wire 32 C& b_operand [31:0] $end
$var wire 1 D& sign $end
$var wire 1 E& zero $end
$var wire 9 F& sum_exponent [8:0] $end
$var wire 32 G& result [31:0] $end
$var wire 1 H& product_round $end
$var wire 48 I& product_normalised [47:0] $end
$var wire 23 J& product_mantissa [22:0] $end
$var wire 48 K& product [47:0] $end
$var wire 24 L& operand_b [23:0] $end
$var wire 24 M& operand_a [23:0] $end
$var wire 1 N& normalised $end
$var wire 9 O& exponent [8:0] $end
$var wire 1 P& Underflow $end
$upscope $end
$upscope $end
$scope module FuI $end
$var wire 32 Q& a_operand [31:0] $end
$var wire 32 R& Integer [31:0] $end
$var reg 24 S& Integer_Value [23:0] $end
$upscope $end
$scope module MuI $end
$var wire 1 o" Exception $end
$var wire 1 n" Overflow $end
$var wire 32 T& a_operand [31:0] $end
$var wire 32 U& b_operand [31:0] $end
$var wire 1 V& sign $end
$var wire 1 W& zero $end
$var wire 9 X& sum_exponent [8:0] $end
$var wire 32 Y& result [31:0] $end
$var wire 1 Z& product_round $end
$var wire 48 [& product_normalised [47:0] $end
$var wire 23 \& product_mantissa [22:0] $end
$var wire 48 ]& product [47:0] $end
$var wire 24 ^& operand_b [23:0] $end
$var wire 24 _& operand_a [23:0] $end
$var wire 1 `& normalised $end
$var wire 9 a& exponent [8:0] $end
$var wire 1 m" Underflow $end
$upscope $end
$upscope $end
$scope module EX_FWD_UNIT $end
$var wire 1 - WB_WRITE_EN $end
$var wire 1 0 WB_F_WRITE_EN $end
$var wire 5 b& WB_ADDR [4:0] $end
$var wire 1 ; MEM_WRITE_EN $end
$var wire 1 B MEM_F_WRITE_EN $end
$var wire 5 c& MEM_ADDR [4:0] $end
$var wire 2 d& EX_REG_TYPE [1:0] $end
$var wire 5 e& ADDR3 [4:0] $end
$var wire 5 f& ADDR2 [4:0] $end
$var wire 5 g& ADDR1 [4:0] $end
$var reg 2 h& OP1_FWD_SEL [1:0] $end
$var reg 2 i& OP2_FWD_SEL [1:0] $end
$var reg 2 j& OP3_FWD_SEL [1:0] $end
$upscope $end
$scope module EX_OP1_FWD_MUX $end
$var wire 32 k& INPUT4 [31:0] $end
$var wire 2 l& SELECT [1:0] $end
$var wire 32 m& INPUT3 [31:0] $end
$var wire 32 n& INPUT2 [31:0] $end
$var wire 32 o& INPUT1 [31:0] $end
$var reg 32 p& RESULT [31:0] $end
$upscope $end
$scope module EX_OP1_SELECT_MUX $end
$var wire 32 q& INPUT1 [31:0] $end
$var wire 1 m SELECT $end
$var wire 32 r& INPUT2 [31:0] $end
$var reg 32 s& RESULT [31:0] $end
$upscope $end
$scope module EX_OP2_FWD_MUX $end
$var wire 32 t& INPUT4 [31:0] $end
$var wire 2 u& SELECT [1:0] $end
$var wire 32 v& INPUT3 [31:0] $end
$var wire 32 w& INPUT2 [31:0] $end
$var wire 32 x& INPUT1 [31:0] $end
$var reg 32 y& RESULT [31:0] $end
$upscope $end
$scope module EX_OP2_SELECT_MUX $end
$var wire 32 z& INPUT1 [31:0] $end
$var wire 1 l SELECT $end
$var wire 32 {& INPUT2 [31:0] $end
$var reg 32 |& RESULT [31:0] $end
$upscope $end
$scope module ID_CONTROL_UNIT $end
$var wire 1 X FREG_WRITE_EN $end
$var wire 1 S OPERAND1_SELECT $end
$var wire 1 R OPERAND2_SELECT $end
$var wire 1 J REG_WRITE_EN $end
$var wire 1 }& funct3_mux_select $end
$var wire 5 ~& rs2 [4:0] $end
$var wire 7 !' opcode [6:0] $end
$var wire 7 "' funct7 [6:0] $end
$var wire 3 #' funct3 [2:0] $end
$var wire 2 $' WRITEBACK_VALUE_SELECT [1:0] $end
$var wire 2 %' REG_TYPE [1:0] $end
$var wire 32 &' INSTRUCTION [31:0] $end
$var wire 3 '' IMMEDIATE_SELECT [2:0] $end
$var wire 5 (' FPU_SELECT [4:0] $end
$var wire 1 ] DATA_MEM_WRITE_DATA_SELECT $end
$var wire 3 )' DATA_MEM_WRITE [2:0] $end
$var wire 4 *' DATA_MEM_READ [3:0] $end
$var wire 4 +' BRANCH_CTRL [3:0] $end
$var wire 6 ,' ALU_SELECT [5:0] $end
$scope module funct3_mux $end
$var wire 3 -' INPUT1 [2:0] $end
$var wire 3 .' INPUT2 [2:0] $end
$var wire 1 }& SELECT $end
$var reg 3 /' RESULT [2:0] $end
$upscope $end
$upscope $end
$scope module ID_FREG_FILE $end
$var wire 1 ! CLK $end
$var wire 32 0' DATA_OUT1 [31:0] $end
$var wire 32 1' DATA_OUT2 [31:0] $end
$var wire 32 2' DATA_OUT3 [31:0] $end
$var wire 5 3' OUT1_ADDRESS [4:0] $end
$var wire 5 4' OUT2_ADDRESS [4:0] $end
$var wire 5 5' OUT3_ADDRESS [4:0] $end
$var wire 1 * RESET $end
$var wire 1 0 WRITE_EN $end
$var wire 5 6' IN_ADDRESS [4:0] $end
$var wire 32 7' DATA_IN [31:0] $end
$var integer 32 8' i [31:0] $end
$upscope $end
$scope module ID_HAZ_DETECT_UNIT $end
$var wire 1 9' EX_DATA_MEM_READ $end
$var wire 5 :' ID_ADDR1 [4:0] $end
$var wire 5 ;' ID_ADDR2 [4:0] $end
$var wire 5 <' ID_ADDR3 [4:0] $end
$var wire 1 S ID_OPERAND1_SELECT $end
$var wire 1 R ID_OPERAND2_SELECT $end
$var wire 2 =' ID_REG_TYPE [1:0] $end
$var wire 1 c EX_REG_WRITE_EN $end
$var wire 5 >' EX_REG_WRITE_ADDR [4:0] $end
$var wire 1 t EX_FREG_WRITE_EN $end
$var reg 1 T LU_HAZ_SIG $end
$upscope $end
$scope module ID_IMMEDIATE_GENERATION_UNIT $end
$var wire 3 ?' SELECT [2:0] $end
$var wire 32 @' TYPE_U [31:0] $end
$var wire 32 A' TYPE_S [31:0] $end
$var wire 32 B' TYPE_J [31:0] $end
$var wire 32 C' TYPE_I [31:0] $end
$var wire 32 D' TYPE_B [31:0] $end
$var wire 32 E' INSTRUCTION [31:0] $end
$var reg 32 F' OUTPUT [31:0] $end
$upscope $end
$scope module ID_PR_FLUSH_UNIT $end
$var wire 1 #" BJ_SIG $end
$var wire 1 T LU_HAZ_SIG $end
$var wire 1 P PR_ID_EX_RESET $end
$var wire 1 O PR_IF_ID_HOLD $end
$var wire 1 N PR_IF_ID_RESET $end
$upscope $end
$scope module ID_REG_FILE $end
$var wire 1 ! CLK $end
$var wire 32 G' DATA_OUT1 [31:0] $end
$var wire 32 H' DATA_OUT2 [31:0] $end
$var wire 5 I' OUT1_ADDRESS [4:0] $end
$var wire 5 J' OUT2_ADDRESS [4:0] $end
$var wire 1 * RESET $end
$var wire 1 - WRITE_EN $end
$var wire 5 K' IN_ADDRESS [4:0] $end
$var wire 32 L' DATA_IN [31:0] $end
$var integer 32 M' i [31:0] $end
$upscope $end
$scope module IF_PC_PLUS_4_ADDER $end
$var wire 32 N' IN [31:0] $end
$var wire 32 O' OUT [31:0] $end
$upscope $end
$scope module MEM_FWD_UNIT $end
$var wire 1 P' MEM_DATA_MEM_WRITE $end
$var wire 1 - WB_WRITE_EN $end
$var wire 1 0 WB_F_WRITE_EN $end
$var wire 1 3 WB_DATA_MEM_READ $end
$var wire 5 Q' WB_ADDR [4:0] $end
$var wire 2 R' MEM_REG_TYPE [1:0] $end
$var wire 5 S' MEM_ADDR [4:0] $end
$var reg 1 8 MEM_FWD_SEL $end
$upscope $end
$scope module MEM_PC_PLUS_4_ADDER $end
$var wire 32 T' OUT [31:0] $end
$var wire 32 U' IN [31:0] $end
$upscope $end
$scope module MEM_WRITE_DATA_FWD_MUX $end
$var wire 1 ) SELECT $end
$var wire 32 V' INPUT2 [31:0] $end
$var wire 32 W' INPUT1 [31:0] $end
$var reg 32 X' RESULT [31:0] $end
$upscope $end
$scope module MEM_WRITE_DATA_SEL_MUX $end
$var wire 1 E SELECT $end
$var wire 32 Y' INPUT2 [31:0] $end
$var wire 32 Z' INPUT1 [31:0] $end
$var reg 32 [' RESULT [31:0] $end
$upscope $end
$scope module PC_SELECT_MUX $end
$var wire 32 \' INPUT1 [31:0] $end
$var wire 32 ]' INPUT2 [31:0] $end
$var wire 1 T SELECT $end
$var reg 32 ^' RESULT [31:0] $end
$upscope $end
$scope module PIPE_REG_EX_MEM $end
$var wire 1 ! CLK $end
$var wire 32 _' EX_ALU_OUT [31:0] $end
$var wire 32 `' EX_FPU_OUT [31:0] $end
$var wire 32 a' EX_FREG_DATA2 [31:0] $end
$var wire 32 b' EX_REG_DATA2 [31:0] $end
$var wire 1 * RESET $end
$var wire 2 c' EX_WB_VALUE_SELECT [1:0] $end
$var wire 1 c EX_REG_WRITE_EN $end
$var wire 5 d' EX_REG_WRITE_ADDR [4:0] $end
$var wire 2 e' EX_REG_TYPE [1:0] $end
$var wire 5 f' EX_REG_READ_ADDR2 [4:0] $end
$var wire 32 g' EX_PC [31:0] $end
$var wire 1 t EX_FREG_WRITE_EN $end
$var wire 1 } EX_DATA_MEM_WRITE_DATA_SELECT $end
$var wire 3 h' EX_DATA_MEM_WRITE [2:0] $end
$var wire 4 i' EX_DATA_MEM_READ [3:0] $end
$var reg 32 j' MEM_ALU_OUT [31:0] $end
$var reg 4 k' MEM_DATA_MEM_READ [3:0] $end
$var reg 3 l' MEM_DATA_MEM_WRITE [2:0] $end
$var reg 1 E MEM_DATA_MEM_WRITE_DATA_SELECT $end
$var reg 32 m' MEM_FPU_OUT [31:0] $end
$var reg 32 n' MEM_FREG_DATA2 [31:0] $end
$var reg 1 B MEM_FREG_WRITE_EN $end
$var reg 32 o' MEM_PC [31:0] $end
$var reg 32 p' MEM_REG_DATA2 [31:0] $end
$var reg 5 q' MEM_REG_READ_ADDR2 [4:0] $end
$var reg 2 r' MEM_REG_TYPE [1:0] $end
$var reg 5 s' MEM_REG_WRITE_ADDR [4:0] $end
$var reg 1 ; MEM_REG_WRITE_EN $end
$var reg 2 t' MEM_WB_VALUE_SELECT [1:0] $end
$upscope $end
$scope module PIPE_REG_ID_EX $end
$var wire 1 ! CLK $end
$var wire 6 u' ID_ALU_SELECT [5:0] $end
$var wire 4 v' ID_BRANCH_CTRL [3:0] $end
$var wire 4 w' ID_DATA_MEM_READ [3:0] $end
$var wire 3 x' ID_DATA_MEM_WRITE [2:0] $end
$var wire 1 ] ID_DATA_MEM_WRITE_DATA_SELECT $end
$var wire 5 y' ID_FPU_SELECT [4:0] $end
$var wire 32 z' ID_FREG_DATA1 [31:0] $end
$var wire 32 {' ID_FREG_DATA2 [31:0] $end
$var wire 32 |' ID_FREG_DATA3 [31:0] $end
$var wire 1 X ID_FREG_WRITE_EN $end
$var wire 32 }' ID_IMMEDIATE [31:0] $end
$var wire 1 S ID_OPERAND1_SELECT $end
$var wire 1 R ID_OPERAND2_SELECT $end
$var wire 32 ~' ID_REG_DATA1 [31:0] $end
$var wire 32 !( ID_REG_DATA2 [31:0] $end
$var wire 5 "( ID_REG_READ_ADDR1 [4:0] $end
$var wire 5 #( ID_REG_READ_ADDR2 [4:0] $end
$var wire 5 $( ID_REG_READ_ADDR3 [4:0] $end
$var wire 2 %( ID_REG_TYPE [1:0] $end
$var wire 5 &( ID_REG_WRITE_ADDR [4:0] $end
$var wire 1 J ID_REG_WRITE_EN $end
$var wire 2 '( ID_WB_VALUE_SELECT [1:0] $end
$var wire 1 (( RESET $end
$var wire 32 )( ID_PC [31:0] $end
$var reg 6 *( EX_ALU_SELECT [5:0] $end
$var reg 4 +( EX_BRANCH_CTRL [3:0] $end
$var reg 4 ,( EX_DATA_MEM_READ [3:0] $end
$var reg 3 -( EX_DATA_MEM_WRITE [2:0] $end
$var reg 1 } EX_DATA_MEM_WRITE_DATA_SELECT $end
$var reg 5 .( EX_FPU_SELECT [4:0] $end
$var reg 32 /( EX_FREG_DATA1 [31:0] $end
$var reg 32 0( EX_FREG_DATA2 [31:0] $end
$var reg 32 1( EX_FREG_DATA3 [31:0] $end
$var reg 1 t EX_FREG_WRITE_EN $end
$var reg 32 2( EX_IMMEDIATE [31:0] $end
$var reg 1 m EX_OPERAND1_SELECT $end
$var reg 1 l EX_OPERAND2_SELECT $end
$var reg 32 3( EX_PC [31:0] $end
$var reg 32 4( EX_REG_DATA1 [31:0] $end
$var reg 32 5( EX_REG_DATA2 [31:0] $end
$var reg 5 6( EX_REG_READ_ADDR1 [4:0] $end
$var reg 5 7( EX_REG_READ_ADDR2 [4:0] $end
$var reg 5 8( EX_REG_READ_ADDR3 [4:0] $end
$var reg 2 9( EX_REG_TYPE [1:0] $end
$var reg 5 :( EX_REG_WRITE_ADDR [4:0] $end
$var reg 1 c EX_REG_WRITE_EN $end
$var reg 2 ;( EX_WB_VALUE_SELECT [1:0] $end
$upscope $end
$scope module PIPE_REG_IF_ID $end
$var wire 1 ! CLK $end
$var wire 1 O HOLD $end
$var wire 32 <( IF_INSTRUCTION [31:0] $end
$var wire 32 =( IF_PC [31:0] $end
$var wire 1 >( RESET $end
$var reg 32 ?( ID_INSTRUCTION [31:0] $end
$var reg 32 @( ID_PC [31:0] $end
$upscope $end
$scope module PIPE_REG_MEM_WB $end
$var wire 1 ! CLK $end
$var wire 32 A( MEM_ALU_OUT [31:0] $end
$var wire 1 B( MEM_DATA_MEM_READ $end
$var wire 32 C( MEM_DATA_MEM_READ_DATA [31:0] $end
$var wire 32 D( MEM_FPU_OUT [31:0] $end
$var wire 1 B MEM_FREG_WRITE_EN $end
$var wire 32 E( MEM_PC [31:0] $end
$var wire 5 F( MEM_REG_WRITE_ADDR [4:0] $end
$var wire 1 ; MEM_REG_WRITE_EN $end
$var wire 2 G( MEM_WB_VALUE_SELECT [1:0] $end
$var wire 1 * RESET $end
$var reg 32 H( WB_ALU_OUT [31:0] $end
$var reg 1 3 WB_DATA_MEM_READ $end
$var reg 32 I( WB_DATA_MEM_READ_DATA [31:0] $end
$var reg 32 J( WB_FPU_OUT [31:0] $end
$var reg 1 0 WB_FREG_WRITE_EN $end
$var reg 32 K( WB_PC [31:0] $end
$var reg 5 L( WB_REG_WRITE_ADDR [4:0] $end
$var reg 1 - WB_REG_WRITE_EN $end
$var reg 2 M( WB_WB_VALUE_SELECT [1:0] $end
$upscope $end
$scope module WB_WB_VALUE_SELECT_MUX $end
$var wire 32 N( INPUT1 [31:0] $end
$var wire 32 O( INPUT2 [31:0] $end
$var wire 32 P( INPUT3 [31:0] $end
$var wire 32 Q( INPUT4 [31:0] $end
$var wire 2 R( SELECT [1:0] $end
$var reg 32 S( RESULT [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 T( \REGISTERS[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 U( \REGISTERS[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 V( \REGISTERS[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 W( \REGISTERS[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 X( \REGISTERS[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 Y( \REGISTERS[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 Z( \REGISTERS[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 [( \REGISTERS[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 \( \REGISTERS[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 ]( \REGISTERS[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 ^( \REGISTERS[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 _( \REGISTERS[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 `( \REGISTERS[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 a( \REGISTERS[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 b( \REGISTERS[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 c( \REGISTERS[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 d( \REGISTERS[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 e( \REGISTERS[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 f( \REGISTERS[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 g( \REGISTERS[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 h( \REGISTERS[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 i( \REGISTERS[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 j( \REGISTERS[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 k( \REGISTERS[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 l( \REGISTERS[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 m( \REGISTERS[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 n( \REGISTERS[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 o( \REGISTERS[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 p( \REGISTERS[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 q( \REGISTERS[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 r( \REGISTERS[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module dut $end
$scope module ID_REG_FILE $end
$var reg 32 s( \REGISTERS[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx s(
bx r(
bx q(
bx p(
bx o(
bx n(
bx m(
bx l(
bx k(
bx j(
bx i(
bx h(
bx g(
bx f(
bx e(
bx d(
bx c(
bx b(
bx a(
bx `(
bx _(
bx ^(
bx ](
bx \(
bx [(
bx Z(
bx Y(
bx X(
bx W(
bx V(
bx U(
bx T(
bx S(
bx R(
bx Q(
bx P(
bx O(
bx N(
bx M(
bx L(
bx K(
bx J(
bx I(
bx H(
bx G(
bx F(
bx E(
bx D(
bx C(
xB(
bx A(
bx @(
bx ?(
1>(
b0 =(
bx <(
bx ;(
bx :(
bx 9(
bx 8(
bx 7(
bx 6(
bx 5(
bx 4(
bx 3(
bx 2(
bx 1(
bx 0(
bx /(
bx .(
bx -(
bx ,(
bx +(
bx *(
bx )(
1((
bx '(
bx &(
bx %(
bx $(
bx #(
bx "(
bx !(
bx ~'
b0 }'
bx |'
bx {'
bx z'
bx y'
bx x'
bx w'
bx v'
bzxx000 u'
bx t'
bx s'
bx r'
bx q'
bx p'
bx o'
bx n'
bx m'
bx l'
bx k'
bx j'
bx i'
bx h'
bx g'
bx f'
bx e'
bx d'
bx c'
b0 b'
b0 a'
b0 `'
bx _'
b0 ^'
b0 ]'
bx \'
bx ['
bx Z'
bx Y'
bx X'
bx W'
bx V'
bx U'
bx T'
bx S'
bx R'
bx Q'
xP'
bx O'
b0 N'
bx M'
bx L'
bx K'
bx J'
bx I'
bx H'
bx G'
b0 F'
bx E'
bx0 D'
bx C'
bx0 B'
bx A'
bx000000000000 @'
bx ?'
bx >'
bx ='
bx <'
bx ;'
bx :'
x9'
bx 8'
bx 7'
bx 6'
bx 5'
bx 4'
bx 3'
bx 2'
bx 1'
bx 0'
b0 /'
b0 .'
bx -'
bzxx000 ,'
bx +'
bx *'
bx )'
bx ('
bx ''
bx &'
bx %'
bx $'
bx #'
bx "'
bx !'
bx ~&
x}&
bx |&
bx {&
b0 z&
b0 y&
bx x&
bx w&
bx v&
bx u&
b0 t&
bx s&
bx r&
b0 q&
b0 p&
bx o&
bx n&
bx m&
bx l&
b0 k&
bx j&
bx i&
bx h&
bx g&
bx f&
bx e&
bx d&
bx c&
bx b&
b110000001 a&
0`&
b0 _&
b0 ^&
b0 ]&
b0 \&
b0 [&
0Z&
b0 Y&
b0 X&
1W&
0V&
b0 U&
b0 T&
b0 S&
b0 R&
b0 Q&
0P&
b1111111 O&
0N&
b100010110100101101001011 M&
b100000000000000000000000 L&
b10001011010010110100101100000000000000000000000 K&
b10110100101101001011 J&
b100010110100101101001011000000000000000000000000 I&
0H&
b10111111100010110100101101001011 G&
b11111110 F&
0E&
1D&
b111111000000000000000000000000 C&
b11000000000010110100101101001011 B&
0A&
0@&
0?&
b1111111 >&
0=&
b111111111110101111100101 <&
b100000000000101000001110 ;&
b11111111111111111111111101101011101100010000110 :&
b11111111111111111111111 9&
b111111111111111111111111011010111011000100001100 8&
17&
b111111111111111111111111111111 6&
b11111110 5&
04&
03&
b111111100000000000101000001110 2&
b111111111111111110101111100101 1&
00&
0/&
0.&
b1111110 -&
0,&
b111111111110101111100101 +&
b100000000000000000000000 *&
b11111111111010111110010100000000000000000000000 )&
b11111111110101111100101 (&
b111111111110101111100101000000000000000000000000 '&
0&&
b111111011111111110101111100101 %&
b11111101 $&
0#&
0"&
b111111000000000000000000000000 !&
b111111111111111110101111100101 ~%
0}%
0|%
b1 {%
b100000000000101000001110 z%
b1111111 y%
b1010000000000010100000111 x%
b10000000 w%
0v%
b1000000000000000000000000000000 u%
0t%
0s%
b10000000 r%
b10 q%
b1111111 p%
b1000000000000000000000000000000 o%
b10111111011111111110101111100101 n%
1m%
b111111100000000000101000001110 l%
b100000000000000000000000 k%
b0 j%
b111111111110101111100101 i%
b1111111111101011111001 h%
b1010000000000010100000111 g%
b110000000000010100000111 f%
b111111100000000000101000001110 e%
b100000000000101000001110 d%
0c%
0b%
b10111111011111111110101111100101 a%
b1000000000000000000000000000000 `%
0_%
0^%
b111111011111111110101111100101 ]%
b111111100000000000101000001110 \%
b111111111111111111111111111111 [%
b111111000000000000000000000000 Z%
b111111111111111110101111100101 Y%
0X%
b1111111 W%
0V%
b111110111000001111111101 U%
b100000100011111000000010 T%
b11111111111010111110010011010000100110111111010 S%
b11111111110101111100101 R%
b111111111110101111100100110100001001101111110100 Q%
1P%
b111111111111111110101111100101 O%
b11111110 N%
0M%
0L%
b111111100000100011111000000010 K%
b111111111110111000001111111101 J%
0I%
0H%
0G%
b1111110 F%
0E%
b111110111000001111111101 D%
b100000000000000000000000 C%
b11111011100000111111110100000000000000000000000 B%
b11110111000001111111101 A%
b111110111000001111111101000000000000000000000000 @%
0?%
b111111011110111000001111111101 >%
b11111101 =%
0<%
0;%
b111111000000000000000000000000 :%
b111111111110111000001111111101 9%
08%
07%
b1 6%
b100000100011111000000010 5%
b1111111 4%
b1010000010001111100000001 3%
b10000000 2%
01%
b1000000000000000000000000000000 0%
0/%
0.%
b10000000 -%
b10 ,%
b1111111 +%
b1000000000000000000000000000000 *%
b10111111011110111000001111111101 )%
1(%
b111111100000100011111000000010 '%
b100000000000000000000000 &%
b0 %%
b111110111000001111111101 $%
b1111101110000011111111 #%
b1010000010001111100000001 "%
b110000010001111100000001 !%
b111111100000100011111000000010 ~$
b100000100011111000000010 }$
0|$
0{$
b10111111011110111000001111111101 z$
b1000000000000000000000000000000 y$
0x$
0w$
b111111011110111000001111111101 v$
b111111100000100011111000000010 u$
b111111111111111110101111100101 t$
b111111000000000000000000000000 s$
b111111111110111000001111111101 r$
0q$
b1111111 p$
0o$
b110111100001111000100000 n$
b100100001111000011110000 m$
b11111011100000111111110011110100011111000000000 l$
b11110111000001111111101 k$
b111110111000001111111100111101000111110000000000 j$
1i$
b111111111110111000001111111101 h$
b11111110 g$
0f$
0e$
b111111100100001111000011110000 d$
b111111110111100001111000100000 c$
0b$
0a$
0`$
b1111110 _$
0^$
b110111100001111000100000 ]$
b100000000000000000000000 \$
b11011110000111100010000000000000000000000000000 [$
b10111100001111000100000 Z$
b110111100001111000100000000000000000000000000000 Y$
0X$
b111111010111100001111000100000 W$
b11111101 V$
0U$
0T$
b111111000000000000000000000000 S$
b111111110111100001111000100000 R$
0Q$
0P$
b1 O$
b100100001111000011110000 N$
b1111111 M$
b1010010000111100001111000 L$
b10000000 K$
0J$
b1000000000000000000000000000000 I$
0H$
0G$
b10000000 F$
b10 E$
b1111111 D$
b1000000000000000000000000000000 C$
b10111111010111100001111000100000 B$
1A$
b111111100100001111000011110000 @$
b100000000000000000000000 ?$
b0 >$
b110111100001111000100000 =$
b1101111000011110001000 <$
b1010010000111100001111000 ;$
b110010000111100001111000 :$
b111111100100001111000011110000 9$
b100100001111000011110000 8$
07$
06$
b10111111010111100001111000100000 5$
b1000000000000000000000000000000 4$
03$
02$
b111111010111100001111000100000 1$
b111111100100001111000011110000 0$
b111111111110111000001111111101 /$
b111111000000000000000000000000 .$
b111111110111100001111000100000 -$
b1 ,$
b110111100001111000100000 +$
b1111111 *$
b1011011110000111100010000 )$
b10000000 ($
1'$
b10111111100010110100101101001011 &$
b1000000000000000000000000000000 %$
0$$
1#$
b10000000 "$
b1 !$
b1111111 ~#
b1000000001101001011010010110101 }#
b10111111100010110100101101001011 |#
1{#
b111111110111100001111000100000 z#
b101101001011010010110101 y#
b0 x#
b100010110100101101001011 w#
b10001011010010110100101 v#
b1011011110000111100010000 u#
b101110100101101001011011 t#
b111111110111100001111000100000 s#
b110111100001111000100000 r#
0q#
0p#
b1000000001101001011010010110101 o#
0n#
0m#
0l#
b111111111111111111111111111111 k#
b1111110 j#
0i#
b111111111111111111111111 h#
b100000000000000000000000 g#
b11111111111111111111111100000000000000000000000 f#
b11111111111111111111111 e#
b111111111111111111111111000000000000000000000000 d#
0c#
b111111011111111111111111111111 b#
b11111101 a#
0`#
0_#
b111111000000000000000000000000 ^#
0]#
0\#
b10111111100010110100101101001011 [#
b111111110111100001111000100000 Z#
b111111111110111000001111111101 Y#
b111111111111111110101111100101 X#
b111111111111111111111111111111 W#
b111111000000000000000000000000 V#
b1111110 U#
b111111000000000000000000000000 T#
b111111011111111111111111111111 S#
b1111110 R#
b111111011111111111111111111111 Q#
0P#
b111111000000000000000000000000 O#
b111111000000000000000000000000 N#
b0 M#
b0 L#
b0 K#
b0 J#
b0 I#
b0 H#
b0 G#
b0 F#
b0 E#
b0 D#
0C#
b0 B#
0A#
0@#
b0 ?#
b0 >#
b0 =#
b10000000000000000000000000000000 <#
b0 ;#
x:#
19#
18#
b10000000000000000000000000000000 7#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b10000000000000000000000000000000 -#
b0 ,#
b0 +#
b0 *#
b10000000000000000000000000000000 )#
b0 (#
bx '#
b10000000000000000000000000000000 &#
b0 %#
b0 $#
b0 ##
b10000000000000000000000000000000 "#
bx !#
b0 ~"
0}"
b0 |"
0{"
b10000000000000000000000000000000 z"
b0 y"
b111111011111111111111111111111 x"
b1 w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b10000000000000000000000000000000 q"
b0 p"
0o"
0n"
0m"
bx l"
bz k"
b1 j"
b0 i"
bz h"
bz g"
b0 f"
b0 e"
b0 d"
xc"
xb"
b0 a"
bx `"
bx _"
bx ^"
bx ]"
b0 \"
b0 ["
bx Z"
bx Y"
bx X"
bx W"
b0 V"
b0 U"
bx T"
bx S"
bx R"
bx Q"
b0 P"
1O"
1N"
1M"
0L"
0K"
0J"
b0 I"
b0 H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
b0 +"
bx *"
b0 )"
bx ("
bx '"
bx &"
bx %"
bx $"
x#"
bx ""
bx !"
bx ~
x}
b0 |
b0 {
b0 z
b0 y
bx x
bx w
bx v
bx u
xt
bx s
b0 r
bx q
b0 p
bx o
bx n
xm
xl
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
xc
bx b
bzxx000 a
bx `
bx _
bx ^
x]
bx \
bx [
bx Z
bx Y
xX
b0 W
bx V
bx U
xT
xS
xR
bx Q
xP
xO
xN
bx M
bx L
bx K
xJ
bx I
bx H
bx G
bx F
xE
bx D
bx C
xB
bx A
bx @
bx ?
bx >
bx =
bx <
x;
bx :
bx 9
x8
bx 7
bx 6
b0 5
bx 4
x3
bx 2
bx 1
x0
bx /
bx .
x-
bx ,
bx +
1*
z)
0(
bx '
bx &
bx %
bx $
0#
bx "
1!
$end
#1
b0 z"
b0 7#
09#
b0 <#
1:#
b0 "#
b0 )#
b0 -#
b0 ("
b0 X'
b0 B'
b0 @'
b0 D'
b0 A'
b0 C'
b0 "'
b0 ~&
b0 #'
b0 -'
b0 !'
b0 $(
b0 #(
b0 "(
b0 &(
b0 <'
b0 ;'
b0 :'
b0 5'
b0 4'
b0 3'
b0 J'
b0 I'
09'
0b"
0c"
b0 !#
b0 '#
b0 ."
b0 &"
b0 C"
b0 |&
b0 '"
b0 D"
b0 s&
0B(
0P'
b0 9
b0 W'
b0 ['
b0 o
b0 W"
b0 i&
b0 u&
b0 q
b0 Q"
b0 h&
b0 l&
b0 +
b0 R"
b0 X"
b0 ^"
b0 m&
b0 v&
b0 7'
b0 L'
b0 V'
b0 S(
b0 U
b0 &'
b0 E'
b0 ?(
b0 Q
b0 )(
b0 @(
b0 b
b0 c'
b0 ;(
b0 ""
b0 G"
b0 +(
b0 !"
b0 i'
b0 ,(
b0 ~
b0 h'
b0 -(
0}
0t
0c
b0 e
b0 d&
b0 e'
b0 9(
b0 x
b0 l"
b0 .(
0l
0m
b0 $"
b0 1"
b0 *(
b0 f
b0 e&
b0 8(
b0 g
b0 f&
b0 f'
b0 7(
b0 h
b0 g&
b0 6(
b0 d
b0 >'
b0 d'
b0 :(
b0 s
b0 {&
b0 2(
b0 u
b0 `"
b0 1(
b0 v
b0 Z"
b0 0(
b0 w
b0 T"
b0 /(
b0 i
b0 x&
b0 5(
b0 j
b0 o&
b0 4(
b0 k
b0 r&
b0 g'
b0 3(
b0 :
b0 t'
b0 G(
b0 $
b0 G
b0 k'
b0 &
b0 F
b0 l'
0E
0B
0;
b0 =
b0 R'
b0 r'
b0 >
b0 S'
b0 q'
b0 <
b0 c&
b0 s'
b0 F(
b0 C
b0 Y'
b0 n'
b0 D
b0 S"
b0 Y"
b0 _"
b0 m'
b0 D(
b0 ?
b0 Z'
b0 p'
b0 "
b0 H
b0 n&
b0 w&
b0 j'
b0 A(
b0 A
b0 U'
b0 o'
b0 ,
b0 M(
b0 R(
03
00
0-
b0 .
b0 b&
b0 6'
b0 K'
b0 Q'
b0 L(
b0 1
b0 J(
b0 Q(
b0 2
b0 I(
b0 O(
b0 4
b0 H(
b0 P(
b0 /
b0 K(
b0 N(
#10
b100 6
b100 O'
b100 \'
#11
b0 7
b0 ,"
b0 %"
b0 *"
b0 F"
b0 _'
b0 5"
b0 6"
b0 0"
b0 /"
b0 -"
b0 2"
b0 B"
b100 @
b100 T'
b100 E(
#20
0N
0#"
#21
b0 4"
b0 3"
b0 7"
#31
1J
0R
0}&
0X
0S
b10 I
b10 $'
b10 '(
b0 `
b0 +'
b0 v'
bz00000 a
bz00000 ,'
bz00000 u'
b0 K
b0 %'
b0 ='
b0 %(
b0 ^
b0 )'
b0 x'
b0 _
b0 *'
b0 w'
0]
#50
b100000 M'
b100000 8'
0!
#51
b0 <"
b0 ;"
b0 >"
b0 E"
b0 :"
b0 ="
b0 ?"
#70
b0 s(
b0 r(
b0 q(
b0 p(
b0 o(
b0 n(
b0 m(
b0 l(
b0 k(
b0 j(
b0 i(
b0 h(
b0 g(
b0 f(
b0 e(
b0 d(
b0 c(
b0 b(
b0 a(
b0 `(
b0 _(
b0 ^(
b0 ](
b0 \(
b0 [(
b0 Z(
b0 Y(
b0 X(
b0 W(
b0 V(
b0 U(
b0 T(
#90
b0 M
b0 G'
b0 ~'
b0 L
b0 H'
b0 !(
b0 [
b0 0'
b0 z'
b0 Z
b0 1'
b0 {'
b0 Y
b0 2'
b0 |'
#100
0>(
x((
1!
b1000010110111 '
b1000010110111 <(
0*
#101
b10000000000000000000000000000000 z"
b10000000000000000000000000000000 7#
19#
b10000000000000000000000000000000 <#
b100 ("
b100 X'
x:#
b10000000000000000000000000000000 "#
b10000000000000000000000000000000 )#
b10000000000000000000000000000000 -#
b100 +
b100 R"
b100 X"
b100 ^"
b100 m&
b100 v&
b100 7'
b100 L'
b100 V'
b100 S(
xb"
xc"
bx !#
bx '#
bx 2
bx I(
bx O(
b100 /
b100 K(
b100 N(
b10 b
b10 c'
b10 ;(
1c
bx x
bx l"
bx .(
bz00000 $"
bz00000 1"
bz00000 *(
#150
0!
#200
1!
#201
b0 o
b0 W"
b0 i&
b0 u&
b1 q
b1 Q"
b1 h&
b1 l&
b10 :
b10 t'
b10 G(
1;
#250
0!
#300
1!
#301
b0 ("
b0 X'
b0 +
b0 R"
b0 X"
b0 ^"
b0 m&
b0 v&
b0 7'
b0 L'
b0 V'
b0 S(
b0 o
b0 W"
b0 i&
b0 u&
b10 ,
b10 M(
b10 R(
1-
#350
0!
#400
1!
#450
0!
#500
1>(
1((
1!
1*
#501
b0 z"
b0 7#
09#
b0 <#
1:#
b0 "#
b0 )#
b0 -#
b0 q
b0 Q"
b0 h&
b0 l&
0b"
0c"
b0 !#
b0 '#
b0 ,
b0 M(
b0 R(
0-
b0 2
b0 I(
b0 O(
b0 /
b0 K(
b0 N(
b0 :
b0 t'
b0 G(
0;
b0 b
b0 c'
b0 ;(
0c
b0 x
b0 l"
b0 .(
b0 $"
b0 1"
b0 *(
#550
b100000 8'
b100000 M'
0!
#570
b0 s(
b0 r(
b0 q(
b0 p(
b0 o(
b0 n(
b0 m(
b0 l(
b0 k(
b0 j(
b0 i(
b0 h(
b0 g(
b0 f(
b0 e(
b0 d(
b0 c(
b0 b(
b0 a(
b0 `(
b0 _(
b0 ^(
b0 ](
b0 \(
b0 [(
b0 Z(
b0 Y(
b0 X(
b0 W(
b0 V(
b0 U(
b0 T(
#600
0>(
x((
1!
b11100000000000110010011 '
b11100000000000110010011 <(
0*
#601
b10000000000000000000000000000000 z"
b10000000000000000000000000000000 7#
19#
b10000000000000000000000000000000 <#
x:#
b10000000000000000000000000000000 "#
b10000000000000000000000000000000 )#
b10000000000000000000000000000000 -#
b100 ("
b100 X'
xb"
xc"
bx !#
bx '#
b100 +
b100 R"
b100 X"
b100 ^"
b100 m&
b100 v&
b100 7'
b100 L'
b100 V'
b100 S(
b10 b
b10 c'
b10 ;(
1c
bx x
bx l"
bx .(
bz00000 $"
bz00000 1"
bz00000 *(
bx 2
bx I(
bx O(
b100 /
b100 K(
b100 N(
#650
0!
#700
1!
#701
b0 o
b0 W"
b0 i&
b0 u&
b1 q
b1 Q"
b1 h&
b1 l&
b10 :
b10 t'
b10 G(
1;
#750
0!
#800
1!
#801
b0 ("
b0 X'
b0 +
b0 R"
b0 X"
b0 ^"
b0 m&
b0 v&
b0 7'
b0 L'
b0 V'
b0 S(
b0 o
b0 W"
b0 i&
b0 u&
b10 ,
b10 M(
b10 R(
1-
#850
0!
#900
1!
#950
0!
#1000
1!
